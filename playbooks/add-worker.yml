---

- hosts: all
  gather_facts: true
  become: true
  #any_errors_fatal: true

  pre_tasks:
  - name: Create dirs in "{{lookup('env', 'HOME')}}/" on localhost
    file:
      path: "{{item}}"
      state: directory
    run_once: true
    become: false
    delegate_to: localhost
    with_items:
      - "{{lookup('env', 'HOME')}}/.local/bin/"
      - "{{lookup('env', 'HOME')}}/.kube"

  - name: Check kubectl on localhost
    stat: 
      path: "{{lookup('env', 'HOME')}}/.local/bin/kubectl"
    register: _kctl_local
    run_once: true
    delegate_to: localhost
    become: false

  - name: Get kubectl version from master
    shell: kubectl version|tr ',' '\n'|egrep GitVersion|head -1|cut -d':' -f2|xargs
    register: _kubectl_v
    run_once: true
    when: not _kctl_local.stat.exists and node_type == "master"
      
  - name: Download kubectl binary on localhost
    get_url:
      url: "https://dl.k8s.io/release/{{_kubectl_v.stdout}}/bin/linux/amd64/kubectl"
      dest: "{{lookup('env', 'HOME')}}/.local/bin/"
      mode: 0755
    delegate_to: localhost
    become: false
    run_once: true
    when: not _kctl_local.stat.exists

  - name: Fetch kube config from master to localhost
    fetch:
      src: "/home/{{ansible_user}}/.kube/config"
      dest: "{{lookup('env', 'HOME')}}/.kube/"
      flat: yes
    when: node_type == "master"
    become: false
    run_once: true
     
  - name: Remove /tmp/node-status.yml
    file:
      path: /tmp/node-status.yml
      state: absent
    delegate_to: localhost
    become: false
    run_once: true

  - name: Create /tmp/node-status.yml
    lineinfile:
      path: /tmp/node-status.yml
      line: 'node_status:'
      create: yes
    delegate_to: localhost
    become: false
    run_once: true
 
  - name: List cluster nodes
    shell: |
      if kubectl get nodes --field-selector metadata.name={{inventory_hostname}}|egrep Ready;then
        echo "  - host: {{inventory_hostname}}" >> /tmp/node-status.yml
        echo "    ready: true" >> /tmp/node-status.yml
      else
        echo "  - host: {{inventory_hostname}}" >> /tmp/node-status.yml
        echo "    ready: false" >> /tmp/node-status.yml
      fi
    delegate_to: localhost
    become: false

  - name: Include vars from /tmp/node-status.yml
    include_vars:
      file: /tmp/node-status.yml

  - debug:
      var: node_status  
    run_once: true

  - name: Set fact kube_node_status
    set_fact:
      kube_node_status: "{{item.ready}}"
    with_items: "{{node_status}}"
    when: item.host == inventory_hostname
  
  - debug:
      var: kube_node_status

  - name: Remove existing Ready worker node from play_hosts
    meta: end_host
    when: 
      - node_type == "worker"
      - kube_node_status|bool
    
  - name: Abort playbook if no worker node left to add in cluster
    meta: end_host
    when: ansible_play_hosts is not search('worker')

  tasks:
  - block:
    - name: Create /etc/apt/keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755
        owner: root
        group: root
    
    - name: Get stat of /etc/apt/keyrings/docker.gpg
      stat:
        path: /etc/apt/keyrings/docker.gpg
      register: _docker_gpg

    - name: Install Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      when: not _docker_gpg.stat.exists

    - name: Setup docker reposiroty
      shell: |
        echo  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Install docker packages
      apt:
        name:
          - docker.io
          - containerd 
        autoremove: yes
        update_cache: yes
        state: latest
    when: node_type == "worker"

  - name: swapoff
    command: swapoff -a
    when: node_type == "worker"

  - name: Fetch files from master
    fetch:
      src: "{{item}}"
      dest: /tmp/
      flat: yes
    with_items:
      - /etc/docker/daemon.json
    when: node_type == "master"
    run_once: true

  - name: Copy docker daemon json on worker nodes
    copy:
      src: /tmp/daemon.json
      dest: /etc/docker/
      mode: 0644
      owner: root
      group: root
    when: node_type == "worker"

  - name: Get kubeadm version from master
    shell: apt list -a kubeadm|awk '/now/{print $2}'
    register: _kadm_version
    when: node_type == "master"
    run_once: true

  - debug:
      var: _kadm_version.stdout
    run_once: true

  - name: Install kube packages on worker nodes
    apt: 
      name:
        - "{{item}}={{_kadm_version.stdout}}"
      state: present
      update_cache: yes
      allow_downgrade: yes
    with_items:
      - kubeadm
      - kubelet
    when: node_type == "worker"
    
  - name: Cleanup existing files
    file:
      path: /etc/kubernetes
      state: absent
    when: node_type == "worker"

  - name: Stop kubelet
    systemd:
      name: kubelet
      state: stopped
    when: node_type == "worker"
    
  - name: Restart docker
    systemd:
      name: docker
      state: restarted
    when: node_type == "worker"

  - name: Generate token
    shell: 'kubeadm token create --print-join-command'
    register: _kadm_token
    when: node_type == "master"
    run_once: true

  - debug:
      var: _kadm_token.stdout
    when: node_type == "master"
    run_once: true

  - name: Run kubeadm join on worker node
    shell: '{{_kadm_token.stdout}}'
    when: node_type == "worker"

  - name: Check Ready status of new added node
    shell: kubectl get nodes --field-selector metadata.name={{inventory_hostname}}|egrep Ready
    register: _node_ready
    retries: 5
    delay: 10
    until: _node_ready.rc == 0
    delegate_to: localhost
    when: inventory_hostname is search('worker')
    become: false

  - name: Set Worker nodes label to worker
    shell: kubectl label node {{inventory_hostname}} node-role.kubernetes.io/worker=worker
    delegate_to: localhost
    when: inventory_hostname is search('worker')
    become: false
    
  - debug:
      msg: "Added {{inventory_hostname}} successfully in kubernetes cluster"
    when: node_type == "worker"
